

package org.apache.beam.sdk.io.solace;

import org.apache.beam.sdk.coders.Coder;
import org.joda.time.Duration;

import javax.annotation.Nullable;

// Generated by com.google.auto.value.processor.AutoValueProcessor
final class AutoValue_SolaceIO_Read<T> extends SolaceIO.Read<T> {

  private final SolaceIO.ConnectionConfiguration connectionConfiguration;

  private final long maxNumRecords;

  private final Duration maxReadTime;

  private final SolaceIO.MessageMapper<T> messageMapper;

  private final Coder<T> coder;

  private AutoValue_SolaceIO_Read(
      @Nullable SolaceIO.ConnectionConfiguration connectionConfiguration,
      long maxNumRecords,
      @Nullable Duration maxReadTime,
      @Nullable SolaceIO.MessageMapper<T> messageMapper,
      @Nullable Coder<T> coder) {
    this.connectionConfiguration = connectionConfiguration;
    this.maxNumRecords = maxNumRecords;
    this.maxReadTime = maxReadTime;
    this.messageMapper = messageMapper;
    this.coder = coder;
  }

  @Nullable
  @Override
  SolaceIO.ConnectionConfiguration connectionConfiguration() {
    return connectionConfiguration;
  }

  @Override
  long maxNumRecords() {
    return maxNumRecords;
  }

  @Nullable
  @Override
  Duration maxReadTime() {
    return maxReadTime;
  }

  @Nullable
  @Override
  SolaceIO.MessageMapper<T> messageMapper() {
    return messageMapper;
  }

  @Nullable
  @Override
  Coder<T> coder() {
    return coder;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof SolaceIO.Read) {
      SolaceIO.Read<?> that = (SolaceIO.Read<?>) o;
      return ((this.connectionConfiguration == null) ? (that.connectionConfiguration() == null) : this.connectionConfiguration.equals(that.connectionConfiguration()))
           && (this.maxNumRecords == that.maxNumRecords())
           && ((this.maxReadTime == null) ? (that.maxReadTime() == null) : this.maxReadTime.equals(that.maxReadTime()))
           && ((this.messageMapper == null) ? (that.messageMapper() == null) : this.messageMapper.equals(that.messageMapper()))
           && ((this.coder == null) ? (that.coder() == null) : this.coder.equals(that.coder()));
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h$ = 1;
    h$ *= 1000003;
    h$ ^= (connectionConfiguration == null) ? 0 : connectionConfiguration.hashCode();
    h$ *= 1000003;
    h$ ^= (int) ((maxNumRecords >>> 32) ^ maxNumRecords);
    h$ *= 1000003;
    h$ ^= (maxReadTime == null) ? 0 : maxReadTime.hashCode();
    h$ *= 1000003;
    h$ ^= (messageMapper == null) ? 0 : messageMapper.hashCode();
    h$ *= 1000003;
    h$ ^= (coder == null) ? 0 : coder.hashCode();
    return h$;
  }

  private static final long serialVersionUID = 42L;

  @Override
  SolaceIO.Read.Builder<T> builder() {
    return new Builder<T>(this);
  }

  static final class Builder<T> extends SolaceIO.Read.Builder<T> {
    private SolaceIO.ConnectionConfiguration connectionConfiguration;
    private Long maxNumRecords;
    private Duration maxReadTime;
    private SolaceIO.MessageMapper<T> messageMapper;
    private Coder<T> coder;
    Builder() {
    }
    private Builder(SolaceIO.Read<T> source) {
      this.connectionConfiguration = source.connectionConfiguration();
      this.maxNumRecords = source.maxNumRecords();
      this.maxReadTime = source.maxReadTime();
      this.messageMapper = source.messageMapper();
      this.coder = source.coder();
    }
    @Override
    SolaceIO.Read.Builder<T> setConnectionConfiguration(SolaceIO.ConnectionConfiguration connectionConfiguration) {
      this.connectionConfiguration = connectionConfiguration;
      return this;
    }
    @Override
    SolaceIO.Read.Builder<T> setMaxNumRecords(long maxNumRecords) {
      this.maxNumRecords = maxNumRecords;
      return this;
    }
    @Override
    SolaceIO.Read.Builder<T> setMaxReadTime(Duration maxReadTime) {
      this.maxReadTime = maxReadTime;
      return this;
    }
    @Override
    SolaceIO.Read.Builder<T> setMessageMapper(SolaceIO.MessageMapper<T> messageMapper) {
      this.messageMapper = messageMapper;
      return this;
    }
    @Override
    SolaceIO.Read.Builder<T> setCoder(Coder<T> coder) {
      this.coder = coder;
      return this;
    }
    @Override
    SolaceIO.Read<T> build() {
      String missing = "";
      if (this.maxNumRecords == null) {
        missing += " maxNumRecords";
      }
      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new AutoValue_SolaceIO_Read<T>(
          this.connectionConfiguration,
          this.maxNumRecords,
          this.maxReadTime,
          this.messageMapper,
          this.coder);
    }
  }

}
